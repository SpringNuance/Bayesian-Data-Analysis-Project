p1 <- plotConvergence(intercept_draws, "intercept")
https_draws <- pooled_sampling$draws("https_coeff", format = "matrix")
p2 <- plotConvergence(https_draws, "https coefficient")
grid.arrange(p1, p2, ncol = 2)
# whois_draws <- pooled_sampling$draws("whois_coeff[1]", format = "matrix")
# plotConvergence(whois_draws, "whois coefficient")
#js_len_draws <- pooled_sampling$draws("js_len_coeff[1]", format = "matrix")
#plotConvergence(js_len_draws, "JS length coefficient")
#js_obf_len_draws <- pooled_sampling$draws("js_obf_len_coeff[1]", format = "matrix")
#plotConvergence(js_obf_len_draws, "JS obfuscated length coefficient")
pooled_sampling$diagnostic_summary()
summaryDiagnostics = data.frame()
for (i in 1:K){
summaryDiagnosticsCountry <- pooled_sampling$summary(c("intercept","https_coeff",
"whois_coeff","js_len_coeff","js_obf_len_coeff"))[, c("variable", "rhat", "ess_bulk", "ess_tail")]
summaryDiagnostics <- rbind(summaryDiagnostics, summaryDiagnosticsCountry)
}
summaryDiagnostics$variable <- 1:15
summaryDiagnostics <- summaryDiagnostics %>% rename(index = variable)
p1 <- ggplot(summaryDiagnostics, aes(x = index, y = rhat)) +
geom_point() +
geom_hline(yintercept = 1.05, color = "red") +
annotate("text", x = 15, y = 1.055, label = "critical Rhat value = 1.05",
hjust = 1, color = "red") +
xlab("Index") +
ylab("Rhat values") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size = 10)) +
ggtitle("Rhat values\n of all coefficients")
p2 <- ggplot(summaryDiagnostics, aes(x = index, y = ess_bulk)) +
geom_point() +
geom_hline(yintercept = 8000, color = "red") +
annotate("text", x = 10, y = 7800, label = "Samples = 8000",
hjust = 1, color = "red") +
xlab("Index") +
ylab("Bulk ESS values") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size = 10)) +
ggtitle("Bulk effective sample size\n of all coefficients")
p3 <- ggplot(summaryDiagnostics, aes(x = index, y = ess_tail)) +
geom_point() +
geom_hline(yintercept = 8000, color = "red") +
annotate("text", x = 10, y = 7800, label = "Samples = 8000",
hjust = 1, color = "red") +
xlab("Index") +
ylab("Tail ESS values") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(plot.title = element_text(size = 10)) +
ggtitle("Tail effective sample size\n of all coefficients")
grid.arrange(p1, p2, p3, ncol = 3)
metricsName <- c("Accuracy", "Precision", "Recall", "F1")
metricsSummary <- data.frame(Metrics=metricsName)
metricsSummary$Accuracy <- NULL
metricsSummary$Precision <- NULL
metricsSummary$Recall <- NULL
metricsSummary$F1 <- NULL
#print(metricsSummary)
sumTP <- 0
sumTN <- 0
sumFP <- 0
sumFN <- 0
listTrue <- c()
listPred <- c()
for (k in 1:K){
#predicted_train = c()
#for (i in 1:N_list[[k]]){
#  draws <- pooled_sampling$draws(paste("label_train_pred[",k,",",i,"]", sep=""), format = "matrix")
#  predicted_train <- c(predicted_train, as.vector(draws[1, ]))
#}
#true_train = label_list[[k]][1:N_list[[k]]]
#confusion_matrix <- table(predicted_train, true_train)
true_train = label_list[[k]][1:N_list[[k]]]
js_len_truncated <- js_len_list[[k]][1:N_list[[k]]]
js_obf_len_truncated <- js_obf_len_list[[k]][1:N_list[[k]]]
https_truncated <- https_list[[k]][1:N_list[[k]]]
whois_truncated <- whois_list[[k]][1:N_list[[k]]]
intercept <- mean(as.vector(pooled_sampling$draws(paste("intercept",sep=""), format = "matrix")[, 1]))
js_len_coeff <- mean(as.vector(pooled_sampling$draws(paste("js_len_coeff",sep=""), format = "matrix")[, 1]))
js_obf_len_coeff <- mean(as.vector(pooled_sampling$draws(paste("js_obf_len_coeff",sep=""), format = "matrix")[, 1]))
https_coeff <- mean(as.vector(pooled_sampling$draws(paste("https_coeff",sep=""), format = "matrix")[, 1]))
whois_coeff <- mean(as.vector(pooled_sampling$draws(paste("whois_coeff",sep=""), format = "matrix")[, 1]))
predicted_train <- bernoulli_logit(intercept, js_len_coeff, js_obf_len_coeff, https_coeff, whois_coeff, js_len_truncated, js_obf_len_truncated, https_truncated, whois_truncated)
listTrue <- c(listTrue, true_train)
listPred <- c(listPred, predicted_train)
confusion_matrix <- table(predicted_train, true_train)
TP <- confusion_matrix[2,2]
TN <- confusion_matrix[1,1]
FP <-confusion_matrix[1,2]
FN <-confusion_matrix[2,1]
#cat(TP,TN,FP,FN)
sumTP <- sumTP + TP
sumTN <- sumTN + TN
sumFP <- sumFP + FP
sumFN <- sumFN + FN
accuracy <- (TP+TN)/(TP+FP+FN+TN)
precision <- TP/(TP+FP)
recall <- TP/(TP+FN)
f1 <-  2*(precision*recall)/(precision+recall)
metricsSummary[,countries[k]] <- c(accuracy, precision,recall,f1)
}
accuracy <- (sumTP+sumTN)/(sumTP+sumFP+sumFN+sumTN)
prevalence <- (sumTP+sumFN)/(sumTP+sumFP+sumFN+sumTN)
sensitivity <- sumTP/(sumTP+sumFN)
specificity <- sumFN/(sumFN+sumFP)
precision <- sumTP/(sumTP+sumFP)
recall <- sumTP/(sumTP+sumFN)
f1 <-  2*(precision*recall)/(precision+recall)
metricsSummary[,"All countries"] <- c(accuracy, precision,recall,f1)
metricsSummary
metricsName <- c("Accuracy", "Precision", "Recall", "F1")
metricsSummary <- data.frame(Metrics=metricsName)
metricsSummary$Accuracy <- NULL
metricsSummary$Precision <- NULL
metricsSummary$Recall <- NULL
metricsSummary$F1 <- NULL
#print(metricsSummary)
sumTP <- 0
sumTN <- 0
sumFP <- 0
sumFN <- 0
listTrue <- c()
listPred <- c()
for (k in 1:K){
#predicted_train = c()
#for (i in 1:N_list[[k]]){
#  draws <- pooled_sampling$draws(paste("label_train_pred[",k,",",i,"]", sep=""), format = "matrix")
#  predicted_train <- c(predicted_train, as.vector(draws[1, ]))
#}
#true_train = label_list[[k]][1:N_list[[k]]]
#confusion_matrix <- table(predicted_train, true_train)
true_train = label_list[[k]][1:N_list[[k]]]
js_len_truncated <- js_len_list[[k]][1:N_list[[k]]]
js_obf_len_truncated <- js_obf_len_list[[k]][1:N_list[[k]]]
https_truncated <- https_list[[k]][1:N_list[[k]]]
whois_truncated <- whois_list[[k]][1:N_list[[k]]]
intercept <- mean(as.vector(pooled_sampling$draws(paste("intercept",sep=""), format = "matrix")[, 1]))
js_len_coeff <- mean(as.vector(pooled_sampling$draws(paste("js_len_coeff",sep=""), format = "matrix")[, 1]))
js_obf_len_coeff <- mean(as.vector(pooled_sampling$draws(paste("js_obf_len_coeff",sep=""), format = "matrix")[, 1]))
https_coeff <- mean(as.vector(pooled_sampling$draws(paste("https_coeff",sep=""), format = "matrix")[, 1]))
whois_coeff <- mean(as.vector(pooled_sampling$draws(paste("whois_coeff",sep=""), format = "matrix")[, 1]))
predicted_train <- bernoulli_logit(intercept, js_len_coeff, js_obf_len_coeff, https_coeff, whois_coeff, js_len_truncated, js_obf_len_truncated, https_truncated, whois_truncated)
listTrue <- c(listTrue, true_train)
listPred <- c(listPred, predicted_train)
confusion_matrix <- table(predicted_train, true_train)
TP <- confusion_matrix[2,2]
TN <- confusion_matrix[1,1]
FP <-confusion_matrix[1,2]
FN <-confusion_matrix[2,1]
#cat(TP,TN,FP,FN)
sumTP <- sumTP + TP
sumTN <- sumTN + TN
sumFP <- sumFP + FP
sumFN <- sumFN + FN
accuracy <- (TP+TN)/(TP+FP+FN+TN)
precision <- TP/(TP+FP)
recall <- TP/(TP+FN)
f1 <-  2*(precision*recall)/(precision+recall)
metricsSummary[,countries[k]] <- c(accuracy, precision,recall,f1)
}
accuracy <- (sumTP+sumTN)/(sumTP+sumFP+sumFN+sumTN)
precision <- sumTP/(sumTP+sumFP)
recall <- sumTP/(sumTP+sumFN)
f1 <-  2*(precision*recall)/(precision+recall)
metricsSummary[,"All countries"] <- c(accuracy, precision,recall,f1)
metricsSummary
metricsName <- c("Accuracy", "Precision", "Recall", "F1")
metricsSummary <- data.frame(Metrics=metricsName)
metricsSummary$Accuracy <- NULL
metricsSummary$Precision <- NULL
metricsSummary$Recall <- NULL
metricsSummary$F1 <- NULL
#print(metricsSummary)
sumTP <- 0
sumTN <- 0
sumFP <- 0
sumFN <- 0
listTrue <- c()
listPred <- c()
for (k in 1:K){
# predicted_test = c()
# for (i in 1:M_list[[k]]){
#  draws <- pooled_sampling$draws(paste("label_test_pred[",k,",",i,"]", sep=""), format = "matrix")
#  predicted_test <- c(predicted_test, as.vector(draws[1, ]))
# }
true_test = label_test_list[[k]][1:M_list[[k]]]
js_len_truncated <- js_len_test_list[[k]][1:M_list[[k]]]
js_obf_len_truncated <- js_obf_len_test_list[[k]][1:M_list[[k]]]
https_truncated <- https_test_list[[k]][1:M_list[[k]]]
whois_truncated <- whois_test_list[[k]][1:M_list[[k]]]
intercept <- mean(as.vector(pooled_sampling$draws(paste("intercept",sep=""), format = "matrix")[, 1]))
js_len_coeff <- mean(as.vector(pooled_sampling$draws(paste("js_len_coeff",sep=""), format = "matrix")[, 1]))
js_obf_len_coeff <- mean(as.vector(pooled_sampling$draws(paste("js_obf_len_coeff",sep=""), format = "matrix")[, 1]))
https_coeff <- mean(as.vector(pooled_sampling$draws(paste("https_coeff",sep=""), format = "matrix")[, 1]))
whois_coeff <- mean(as.vector(pooled_sampling$draws(paste("whois_coeff",sep=""), format = "matrix")[, 1]))
predicted_test <- bernoulli_logit(intercept, js_len_coeff, js_obf_len_coeff, https_coeff, whois_coeff, js_len_truncated, js_obf_len_truncated, https_truncated, whois_truncated)
confusion_matrix <- table(predicted_test, true_test)
listTrue <- c(listTrue, true_test)
listPred <- c(listPred, predicted_test)
TP <- confusion_matrix[2,2]
TN <- confusion_matrix[1,1]
FP <-confusion_matrix[1,2]
FN <-confusion_matrix[2,1]
sumTP <- sumTP + TP
sumTN <- sumTN + TN
sumFP <- sumFP + FP
sumFN <- sumFN + FN
accuracy <- (TP+TN)/(TP+FP+FN+TN)
precision <- TP/(TP+FP)
recall <- TP/(TP+FN)
f1 <-  2*(precision*recall)/(precision+recall)
metricsSummary[,countries[k]] <- c(accuracy, precision,recall,f1)
}
accuracy <- (sumTP+sumTN)/(sumTP+sumFP+sumFN+sumTN)
prevalence <- (sumTP+sumFN)/(sumTP+sumFP+sumFN+sumTN)
sensitivity <- sumTP/(sumTP+sumFN)
specificity <- sumFN/(sumFN+sumFP)
precision <- sumTP/(sumTP+sumFP)
recall <- sumTP/(sumTP+sumFN)
f1 <-  2*(precision*recall)/(precision+recall)
metricsSummary[,"All countries"] <- c(accuracy, precision,recall,f1)
metricsSummary
pooled_sampling_prior1 <- model_pooled_prior1$sample(data = stan_data, chains=4,
iter_warmup = 1000, iter_sampling = 2000, refresh=0)
loo_loglike_pooled0 <- pooled_sampling$loo(variables="log_likelihood",r_eff=TRUE)
loo_loglike_pooled1 <- pooled_sampling_prior1$loo(variables="log_likelihood",r_eff=TRUE)
loo_compare(x = list(loo_loglike_pooled0=loo_loglike_pooled0,
loo_loglike_pooled1=loo_loglike_pooled1))
loo_loglik_separate <- separate_sampling$loo(variables="log_likelihood",r_eff=TRUE)
cat("The PSIS-LOO elpd value of the separate model is\n")
print(loo_loglik_separate$estimates[1][1])
pareto_k_separate <- loo_loglik_separate$diagnostics$pareto_k
cat("\nThe k-hat diagnostics of the separate model is\n")
print(loo_loglik_separate)
loo_loglik_pooled <- pooled_sampling$loo(variables="log_likelihood",r_eff=TRUE)
cat("The PSIS-LOO elpd value of the pooled model is\n")
print(loo_loglik_pooled$estimates[1][1])
pareto_k_pooled <- loo_loglik_pooled$diagnostics$pareto_k
cat("\nThe k-hat diagnostics of the pooled model is\n")
print(loo_loglik_pooled)
plotConvergence <- function (draws, paramName){
chain1 <- as.vector(draws[1:2000, 1])
chain2 <- as.vector(draws[2001:4000, 1])
chain3 <- as.vector(draws[4001:6000, 1])
chain4 <- as.vector(draws[6001:8000, 1])
iters = length(chain1)
indices <- 1:iters
data <- data.frame(indices, chain1, chain2,
chain3, chain4)
p <- ggplot(data, aes(x=indices)) +
ggtitle(paste("Pooled model\nConvergence of",paramName,"\n",iters,"sampling, 1000 warm-up iterations")) +
xlab("iteration") +
ylab(paramName) +
theme(plot.title = element_text(hjust = 0.5, size=10), legend.position = "right") +
geom_line(aes(y = chain1, color = "chain1")) +
geom_line(aes(y = chain2, color = "chain2")) +
geom_line(aes(y = chain3, color = "chain3")) +
geom_line(aes(y = chain4, color = "chain4")) +
scale_color_manual(name = "MCMC", values = c("chain1" = "red", "chain2" = "blue", "chain3" = "green", "chain4" = "black"))
return(p)
}
intercept_draws <- pooled_sampling$draws("intercept", format = "matrix")
p1 <- plotConvergence(intercept_draws, "intercept")
https_draws <- pooled_sampling$draws("https_coeff", format = "matrix")
p2 <- plotConvergence(https_draws, "https coefficient")
grid.arrange(p1, p2, ncol = 2)
# whois_draws <- pooled_sampling$draws("whois_coeff[1]", format = "matrix")
# plotConvergence(whois_draws, "whois coefficient")
#js_len_draws <- pooled_sampling$draws("js_len_coeff[1]", format = "matrix")
#plotConvergence(js_len_draws, "JS length coefficient")
#js_obf_len_draws <- pooled_sampling$draws("js_obf_len_coeff[1]", format = "matrix")
#plotConvergence(js_obf_len_draws, "JS obfuscated length coefficient")
loo_loglik_separate <- separate_sampling$loo(variables="log_likelihood",r_eff=TRUE)
loo_loglik_pooled <- pooled_sampling$loo(variables="log_likelihood",r_eff=TRUE)
pareto_k_separate <- loo_loglik_separate$diagnostics$pareto_k
pareto_k_pooled <- loo_loglik_pooled$diagnostics$pareto_k
df <- data.frame(pareto_k_separate = pareto_k_separate,
pareto_k_pooled = pareto_k_pooled)
ggplot(df, aes(x = 1:length(pareto_k_separate),
y = pareto_k_separate,
fill = "pareto_k_separate")) +
geom_bar(stat = "identity", width = 0.5) +
geom_bar(aes(x = 1:length(pareto_k_pooled) + 0.5,
y = pareto_k_pooled,
fill = "pareto_k_pooled"),
stat = "identity", width = 0.5) +
scale_fill_manual(values = c("pareto_k_separate" = "purple",
"pareto_k_pooled" = "orange")) +
labs(title = "PSIS k-values of the separate and pooled models",
x = "Index",
y = "Value",
fill = "") +
geom_hline(yintercept = 0.7, color = "darkred", size = 1) +
annotate("text", x = 40, y = 0.75, label = "bad k-values = 0.7", color = "darkred", hjust = 1, vjust = 0) +
geom_hline(yintercept = 1, color = "red", size = 1) +
annotate("text", x = 40, y = 1.05, label = "very bad k-values = 1", color = "red", hjust = 1, vjust = 0) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size=15)) +
theme(legend.position = "bottom")
df <- data.frame(pareto_k_separate = pareto_k_separate,
pareto_k_pooled = pareto_k_pooled)
ggplot(df, aes(x = 1:length(pareto_k_separate),
y = pareto_k_separate,
fill = "pareto_k_separate")) +
geom_bar(stat = "identity", width = 0.5) +
geom_bar(aes(x = 1:length(pareto_k_pooled) + 0.5,
y = pareto_k_pooled,
fill = "pareto_k_pooled"),
stat = "identity", width = 0.5) +
scale_fill_manual(values = c("pareto_k_separate" = "purple",
"pareto_k_pooled" = "orange")) +
labs(title = "PSIS k-values of the separate and pooled models",
x = "Index",
y = "Value",
fill = "") +
geom_hline(yintercept = 0.7, color = "darkred", size = 1) +
annotate("text", x = 40, y = 0.75, label = "bad k-values = 0.7", color = "darkred", hjust = 1, vjust = 0) +
geom_hline(yintercept = 1, color = "red", size = 1) +
annotate("text", x = 40, y = 1.05, label = "very bad k-values = 1", color = "red", hjust = 1, vjust = 0) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size=15)) +
theme(legend.position = "bottom")
df <- data.frame(pareto_k_separate = pareto_k_separate,
pareto_k_pooled = pareto_k_pooled)
ggplot(df, aes(x = 1:length(pareto_k_separate),
y = pareto_k_separate,
fill = "pareto_k_separate")) +
geom_bar(stat = "identity", width = 0.5) +
geom_bar(aes(x = 1:length(pareto_k_pooled) + 0.5,
y = pareto_k_pooled,
fill = "pareto_k_pooled"),
stat = "identity", width = 0.5) +
scale_fill_manual(values = c("pareto_k_separate" = "purple",
"pareto_k_pooled" = "orange")) +
labs(title = "PSIS k-values of the separate and pooled models",
x = "Index",
y = "Value",
fill = "") +
geom_hline(yintercept = 0.7, color = "darkred", size = 1) +
annotate("text", x = 40, y = 0.75, label = "bad k-values = 0.7", color = "darkred", hjust = 1, vjust = 0) +
geom_hline(yintercept = 1, color = "red", size = 1) +
annotate("text", x = 40, y = 1.05, label = "very bad k-values = 1", color = "red", hjust = 1, vjust = 0) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size=15)) +
theme(legend.position = "bottom")
df <- data.frame(pareto_k_separate = pareto_k_separate,
pareto_k_pooled = pareto_k_pooled)
ggplot(df, aes(x = 1:length(pareto_k_separate),
y = pareto_k_separate,
fill = "pareto_k_separate")) +
geom_bar(stat = "identity", width = 0.5) +
geom_bar(aes(x = 1:length(pareto_k_pooled) + 0.5,
y = pareto_k_pooled,
fill = "pareto_k_pooled"),
stat = "identity", width = 0.5) +
scale_fill_manual(values = c("pareto_k_separate" = "purple",
"pareto_k_pooled" = "orange")) +
labs(title = "PSIS k-values of the separate and pooled models",
x = "Index",
y = "Value",
fill = "") +
geom_hline(yintercept = 0.7, color = "darkred", size = 1) +
annotate("text", x = 40, y = 0.75, label = "bad k-values = 0.7", color = "darkred", hjust = 1, vjust = 0) +
geom_hline(yintercept = 1, color = "red", size = 1) +
annotate("text", x = 40, y = 1.05, label = "very bad k-values = 1", color = "red", hjust = 1, vjust = 0) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size=10)) +
theme(legend.position = "bottom")
df <- data.frame(pareto_k_separate = pareto_k_separate,
pareto_k_pooled = pareto_k_pooled)
ggplot(df, aes(x = 1:length(pareto_k_separate),
y = pareto_k_separate,
fill = "pareto_k_separate")) +
geom_bar(stat = "identity", width = 0.5) +
geom_bar(aes(x = 1:length(pareto_k_pooled) + 0.5,
y = pareto_k_pooled,
fill = "pareto_k_pooled"),
stat = "identity", width = 0.5) +
scale_fill_manual(values = c("pareto_k_separate" = "purple",
"pareto_k_pooled" = "orange")) +
labs(title = "PSIS k-values of the separate and pooled models",
x = "Index",
y = "Value",
fill = "") +
geom_hline(yintercept = 0.7, color = "darkred", size = 1) +
annotate("text", x = 40, y = 0.75, label = "bad k-values = 0.7", color = "darkred", hjust = 1, vjust = 0, size=7) +
geom_hline(yintercept = 1, color = "red", size = 1) +
annotate("text", x = 40, y = 1.05, label = "very bad k-values = 1", color = "red", hjust = 1, vjust = 0) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size=10)) +
theme(legend.position = "bottom")
df <- data.frame(pareto_k_separate = pareto_k_separate,
pareto_k_pooled = pareto_k_pooled)
ggplot(df, aes(x = 1:length(pareto_k_separate),
y = pareto_k_separate,
fill = "pareto_k_separate")) +
geom_bar(stat = "identity", width = 0.5) +
geom_bar(aes(x = 1:length(pareto_k_pooled) + 0.5,
y = pareto_k_pooled,
fill = "pareto_k_pooled"),
stat = "identity", width = 0.5) +
scale_fill_manual(values = c("pareto_k_separate" = "purple",
"pareto_k_pooled" = "orange")) +
labs(title = "PSIS k-values of the separate and pooled models",
x = "Index",
y = "Value",
fill = "") +
geom_hline(yintercept = 0.7, color = "darkred", size = 1) +
annotate("text", x = 40, y = 0.75, label = "bad k-values = 0.7", color = "darkred", hjust = 1, vjust = 0, size=7) +
geom_hline(yintercept = 1, color = "red", size = 1) +
annotate("text", x = 40, y = 1.05, label = "very bad k-values = 1", color = "red", hjust = 1, vjust = 0, size=7) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size=10)) +
theme(legend.position = "bottom")
df <- data.frame(pareto_k_separate = pareto_k_separate,
pareto_k_pooled = pareto_k_pooled)
ggplot(df, aes(x = 1:length(pareto_k_separate),
y = pareto_k_separate,
fill = "pareto_k_separate")) +
geom_bar(stat = "identity", width = 0.5) +
geom_bar(aes(x = 1:length(pareto_k_pooled) + 0.5,
y = pareto_k_pooled,
fill = "pareto_k_pooled"),
stat = "identity", width = 0.5) +
scale_fill_manual(values = c("pareto_k_separate" = "purple",
"pareto_k_pooled" = "orange")) +
labs(title = "PSIS k-values of the separate and pooled models",
x = "Index",
y = "Value",
fill = "") +
geom_hline(yintercept = 0.7, color = "darkred", size = 1) +
annotate("text", x = 40, y = 0.75, label = "bad k-values = 0.7", color = "darkred", hjust = 1, vjust = 0, size=3) +
geom_hline(yintercept = 1, color = "red", size = 1) +
annotate("text", x = 40, y = 1.05, label = "very bad k-values = 1", color = "red", hjust = 1, vjust = 0, size=3) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size=10)) +
theme(legend.position = "bottom")
loo_loglik_pooled$estimates
loo_loglik_separate$estimates
loo_loglik_pooled$estimates
loo_loglik_pooled$estimates
loo_loglik_separate$estimates
df <- data.frame(pareto_k_separate = pareto_k_separate,
pareto_k_pooled = pareto_k_pooled)
ggplot(df, aes(x = 1:length(pareto_k_separate),
y = pareto_k_separate,
fill = "pareto_k_separate")) +
geom_bar(stat = "identity", width = 0.5) +
geom_bar(aes(x = 1:length(pareto_k_pooled) + 0.5,
y = pareto_k_pooled,
fill = "pareto_k_pooled"),
stat = "identity", width = 0.5) +
scale_fill_manual(values = c("pareto_k_separate" = "purple",
"pareto_k_pooled" = "orange")) +
labs(title = "PSIS k-values of the separate and pooled models",
x = "Index",
y = "Value",
fill = "") +
geom_hline(yintercept = 0.7, color = "darkred", size = 1) +
annotate("text", x = 40, y = 0.75, label = "bad k-values = 0.7", color = "darkred", hjust = 1, vjust = 0, size=3) +
geom_hline(yintercept = 1, color = "red", size = 1) +
annotate("text", x = 40, y = 1.05, label = "very bad k-values = 1", color = "red", hjust = 1, vjust = 0, size=3) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size=10)) +
theme(legend.position = "bottom")
loo_compare <- loo_compare(x = list(loo_loglik_separate=loo_loglik_separate, loo_loglik_pooled=loo_loglik_pooled))
print(loo_compare)
df <- data.frame(pareto_k_separate = pareto_k_separate,
pareto_k_pooled = pareto_k_pooled)
ggplot(df, aes(x = 1:length(pareto_k_separate),
y = pareto_k_separate,
fill = "pareto_k_separate")) +
geom_bar(stat = "identity", width = 0.5) +
geom_bar(aes(x = 1:length(pareto_k_pooled) + 0.5,
y = pareto_k_pooled,
fill = "pareto_k_pooled"),
stat = "identity", width = 0.5) +
scale_fill_manual(values = c("pareto_k_separate" = "purple",
"pareto_k_pooled" = "orange")) +
labs(title = "PSIS k-values of the separate and pooled models",
x = "Index",
y = "Value",
fill = "") +
geom_hline(yintercept = 0.7, color = "darkred", size = 1) +
annotate("text", x = 40, y = 0.75, label = "bad k-values = 0.7", color = "darkred", hjust = 1, vjust = 0, size=3) +
geom_hline(yintercept = 1, color = "red", size = 1) +
annotate("text", x = 40, y = 1.05, label = "very bad k-values = 1", color = "red", hjust = 1, vjust = 0, size=3) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size=10)) +
theme(legend.position = "bottom")
df <- data.frame(pareto_k_separate = pareto_k_separate,
pareto_k_pooled = pareto_k_pooled)
ggplot(df, aes(x = 1:length(pareto_k_separate),
y = pareto_k_separate,
fill = "pareto_k_separate")) +
geom_bar(stat = "identity", width = 0.5) +
geom_bar(aes(x = 1:length(pareto_k_pooled) + 0.5,
y = pareto_k_pooled,
fill = "pareto_k_pooled"),
stat = "identity", width = 0.5) +
scale_fill_manual(values = c("pareto_k_separate" = "purple",
"pareto_k_pooled" = "orange")) +
labs(title = "PSIS k-values of the separate and pooled models",
x = "Index",
y = "Value",
fill = "") +
geom_hline(yintercept = 0.7, color = "darkred", size = 1) +
annotate("text", x = 40, y = 0.75, label = "bad k-values = 0.7", color = "darkred", hjust = 1, vjust = 0, size=3) +
geom_hline(yintercept = 1, color = "red", size = 1) +
annotate("text", x = 40, y = 1.05, label = "very bad k-values = 1", color = "red", hjust = 1, vjust = 0, size=3) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size=10)) +
theme(legend.position = "bottom")
